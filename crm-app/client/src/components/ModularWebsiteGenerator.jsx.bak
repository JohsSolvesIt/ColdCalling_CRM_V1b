import React, { useState, useEffect, useCallback, useRef } from 'react';
import './ModularWebsiteGenerator.css';

// Load settings from localStorage or use defaults
const loadSavedSettings = () => {
  try {
    const saved = localStorage.getItem('websiteGeneratorSettings');
    return saved ? JSON.parse(saved) : {};
  } catch (err) {
    console.error('Error parsing saved settings:', err);
    return {};
  }
};

// Load settings from localStorage or use defaults
const loadSavedSettings = () => {
  try {
    const saved = localStorage.getItem('websiteGeneratorSettings');
    return saved ? JSON.parse(saved) : {};
  } catch (err) {
    console.error('Error parsing saved settings:', err);
    return {};
  }
};

const savedSettings = loadSavedSettings();

const ModularWebsiteGenerator = ({ selectedContact, onWebsiteGenerated, onClose }) => {
  // Refs
  const previewIframeRef = useRef(null);

  // State declarations
  const [selectedImageForPreview, setSelectedImageForPreview] = useState(null);
  const [imageFilter, setImageFilter] = useState('all');
  const [isLoadingImages, setIsLoadingImages] = useState(false);
  const [availableImages, setAvailableImages] = useState([]);

  // Image loading callback
  const fetchAvailableImages = useCallback(async () => {
    setIsLoadingImages(true);
    try {
      const response = await fetch('/api/website/available-images');
      const data = await response.json();
      if (data.success) {
        setAvailableImages(data.images);
        console.log('📸 Loaded available images:', data.images.length);
      } else {
        console.error('Failed to load available images:', data.error);
      }
    } catch (error) {
      console.error('Error fetching available images:', error);
    } finally {
      setIsLoadingImages(false);
    }
  }, []);

  const handleImageSelect = (imageUrl) => {
    console.log('🖼️ Image selected:', imageUrl);
    console.log('🔄 Before update - customHeroImageUrl:', customHeroImageUrl);
    console.log('🔄 Before update - heroImageSource:', heroImageSource);
    
    setCustomHeroImageUrl(imageUrl);
    setHeroImageSource('gallery');
    setShowImageGallery(false);
    
    // Small delay to ensure state updates before regenerating preview
    setTimeout(() => {
      console.log('⏰ After timeout - customHeroImageUrl should be:', imageUrl);
      generatePreview();
    }, 100);
  };

  const openImageGallery = () => {
    if (availableImages.length === 0) {
      fetchAvailableImages();
    }
    setShowImageGallery(true);
  };

  const getFilteredImages = () => {
    if (imageFilter === 'all') {
      return availableImages;
    }
    return availableImages.filter(image => image.source === imageFilter);
  };

  // Load available layouts and themes
  useEffect(() => {
    const loadOptions = async () => {
      try {
        // Fetch layouts
        const layoutsResponse = await fetch('/api/website/layouts');
        const layoutsData = await layoutsResponse.json();
        if (layoutsData.success) {
          setLayouts(layoutsData.layouts);
          setSelectedLayout(layoutsData.default || 'professional');
        }

        // Fetch themes
        console.log('🎨 Fetching themes from API...');
        const themesResponse = await fetch('/api/website/themes');
        const themesData = await themesResponse.json();
        console.log('🎨 Themes API response:', themesData);
        if (themesData.success) {
          console.log('🎨 Setting themes:', themesData.themes);
          setThemes(themesData.themes);
          // Only set default theme if no theme is currently selected
          if (!selectedTheme || selectedTheme === 'modern-professional') {
            setSelectedTheme(themesData.default || 'modern-professional');
          }
        } else {
          console.error('🎨 Failed to load themes:', themesData);
        }

        // Check Netlify configuration
        const netlifyResponse = await fetch('/api/website/netlify-config');
        const netlifyData = await netlifyResponse.json();
        if (netlifyData.success) {
          setNetlifyConfigured(netlifyData.configured);
        }

        // Load available images
        await fetchAvailableImages();

        // Load existing website if available
        if (selectedContact) {
          loadExistingWebsite();
        }
      } catch (err) {
        setError('Failed to load layout and theme options');
        console.error('Error loading options:', err);
      }
    };

    loadOptions();
  }, []);

  // Load existing website for the selected contact
  const loadExistingWebsite = useCallback(async () => {
    if (!selectedContact || !selectedContact.id) {
      return;
    }

    setIsLoadingExisting(true);
    try {
      const response = await fetch(`/api/website/existing/${selectedContact.id}`);
      const result = await response.json();
      
      if (result.success && result.website) {
        setGeneratedWebsite(result.website);
        // Set both final website URL and current preview to the existing website
        const timestamp = Date.now();
        const websiteUrl = `http://localhost:3030${result.website.websiteUrl}?final=true&t=${timestamp}`;
        setFinalWebsiteUrl(websiteUrl);
        setPreviewUrl(websiteUrl);
        
        // Set layout and theme from existing website if available
        if (result.website.layout) setSelectedLayout(result.website.layout);
        if (result.website.theme) setSelectedTheme(result.website.theme);
        
        // Automatically generate live preview for editing
        const livePreviewUrl = `http://localhost:3030${result.website.websiteUrl}?preview=true&v=${timestamp}&t=${timestamp}`;
        setLivePreviewUrl(livePreviewUrl);
        setActiveTab('preview'); // Switch to preview tab for editing
      } else {
        // No existing website found - generate initial live preview for new websites
        setFinalWebsiteUrl(null);
        setPreviewUrl(null);
        setGeneratedWebsite(null);
        setActiveTab('preview'); // Start with preview for new websites
        
        // Generate initial live preview automatically, but only if we have layout and theme
        setTimeout(() => {
          if (selectedLayout && selectedTheme) {
            generatePreview();
          }
        }, 100); // Small delay to ensure state is updated
      }
    } catch (err) {
      console.error('Error loading existing website:', err);
      // Don't show error for missing website, just show placeholder
    } finally {
      setIsLoadingExisting(false);
    }
  }, [selectedContact]);

  // Save settings to localStorage whenever they change
  const saveSettings = useCallback(() => {
    const settingsToSave = {
      selectedLayout,
      selectedTheme,
      activationBanner,
      heroImageSource,
      customHeroImageUrl,
      heroOverlayOpacity,
      heroBlur,
      heroOverlayWhite,
      profileImageUrl,
      manualHeroTextColors,
      heroTextColor,
      heroTextSecondary,
      heroAccentColor
    };
    
    try {
      localStorage.setItem('websiteGeneratorSettings', JSON.stringify(settingsToSave));
    } catch (err) {
      console.error('Error saving settings:', err);
    }
  }, [selectedLayout, selectedTheme, activationBanner, heroImageSource, customHeroImageUrl, heroOverlayOpacity, heroBlur, heroOverlayWhite, profileImageUrl, manualHeroTextColors, heroTextColor, heroTextSecondary, heroAccentColor]);

  // Save settings whenever they change
  useEffect(() => {
    saveSettings();
  }, [saveSettings]);

  // Helper function to handle rate-limited requests
  const makeRequestWithRetry = async (request, maxRetries = 3) => {
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        const response = await request();
        const data = await response.json();
        
        if (response.status === 429 && attempt < maxRetries - 1) {
          const retryAfter = parseInt(response.headers.get('retry-after')) || Math.pow(2, attempt);
          console.log(`Rate limited, retrying in ${retryAfter} seconds... (Attempt ${attempt + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
          continue;
        }
        
        if (!response.ok) {
          throw { status: response.status, data };
        }
        
        return data;
      } catch (error) {
        if (error.status === 429 && attempt < maxRetries - 1) continue;
        throw error;
      }
    }
  };



const ModularWebsiteGenerator = ({ selectedContact, onWebsiteGenerated, onClose }) => {
  // State declarations
  const [layouts, setLayouts] = useState([]);
  const [themes, setThemes] = useState([]);
  const [selectedLayout, setSelectedLayout] = useState(savedSettings.selectedLayout || 'professional');
  const [selectedTheme, setSelectedTheme] = useState(savedSettings.selectedTheme || 'modern-professional');
  const [activationBanner, setActivationBanner] = useState(savedSettings.activationBanner || false);
  const [heroImageSource, setHeroImageSource] = useState(savedSettings.heroImageSource || 'auto');
  const [customHeroImageUrl, setCustomHeroImageUrl] = useState(savedSettings.customHeroImageUrl || '');
  const [heroOverlayOpacity, setHeroOverlayOpacity] = useState(savedSettings.heroOverlayOpacity || 0.4);
  const [heroBlur, setHeroBlur] = useState(savedSettings.heroBlur || 0);
  const [heroOverlayWhite, setHeroOverlayWhite] = useState(savedSettings.heroOverlayWhite || false);
  const [profileImageUrl, setProfileImageUrl] = useState(savedSettings.profileImageUrl || '');
  const [manualHeroTextColors, setManualHeroTextColors] = useState(savedSettings.manualHeroTextColors || false);
  const [heroTextColor, setHeroTextColor] = useState(savedSettings.heroTextColor || '#ffffff');
  const [heroTextSecondary, setHeroTextSecondary] = useState(savedSettings.heroTextSecondary || '#e5e5e5');
  const [heroAccentColor, setHeroAccentColor] = useState(savedSettings.heroAccentColor || '#3b82f6');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState(null);
  const [isLoadingPreview, setIsLoadingPreview] = useState(false);
  const [previewHtml, setPreviewHtml] = useState(null);
  const [previewCss, setPreviewCss] = useState(null);
  const [previewAssets, setPreviewAssets] = useState({});
  const [activeTab, setActiveTab] = useState('preview');
  const [livePreviewUrl, setLivePreviewUrl] = useState(null);

  const buildContactData = useCallback(() => {
    if (!selectedContact) return {
      id: 'preview-sample',
      name: 'Sample Name',
      email: 'sample@example.com',
      phone: '(555) 123-4567',
      company: 'Sample Company',
      reviews: [],
      recommendations: []
    };

    return {
      id: selectedContact.id,
      name: selectedContact.name || 'Sample Name',
      email: selectedContact.email || 'sample@example.com',
      phone: selectedContact.phone || '(555) 123-4567',
      company: selectedContact.company || 'Sample Company',
      reviews: selectedContact.reviews || selectedContact.data?.reviews || [],
      recommendations: selectedContact.recommendations || selectedContact.data?.recommendations || []
    };
  }, [selectedContact]);

  const handleContactData = useCallback(() => {
    if (!selectedContact) return null;
    const data = buildContactData();
    return data;
  }, [selectedContact, buildContactData]);

  const generatePreview = useCallback(() => {
    if (!selectedLayout || !selectedTheme) {
      console.log('Missing required data for preview');
      return;
    }

    setError(null);
    setIsLoadingPreview(true);

    const requestPayload = {
      contactId: selectedContact?.id || 'preview-sample',
      contactData: buildContactData(),
      layout: selectedLayout,
      theme: selectedTheme,
      ...(activationBanner && { activationBanner }),
      ...(heroImageSource !== 'auto' && { heroImageSource }),
      ...(heroImageSource === 'custom' && { heroImageUrl: customHeroImageUrl }),
      ...(heroImageSource === 'gallery' && { heroImageUrl: customHeroImageUrl }),
      ...(heroOverlayOpacity !== 0.4 && { heroOverlayOpacity }),
      ...(heroBlur !== 0 && { heroBlur }),
      ...(heroOverlayWhite && { heroOverlayWhite }),
      ...(profileImageUrl && { profileImageUrl }),
      ...(manualHeroTextColors && {
        manualHeroTextColors,
        heroTextColor,
        heroTextSecondary,
        heroAccentColor
      })
    };

    console.log('🎨 Generating preview...', requestPayload);

    fetch('/api/website/preview', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestPayload)
    })
    .then(response => {
      if (!response.ok) {
        switch (response.status) {
          case 413:
            throw new Error('Preview data is too large. Try using fewer customizations.');
          case 429:
            throw new Error('Too many requests. Please wait a moment and try again.');
          case 500:
            throw new Error('Server error. Please try again later.');
          default:
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }
      }
      return response.json();
    })
    .then(data => {
      if (data.error) {
        throw new Error(data.error);
      }

      setPreviewHtml(data.html);
      setPreviewCss(data.css);
      setPreviewAssets(data.assets || {});
      setLivePreviewUrl(data.url);
      
      const previewFrame = document.getElementById('previewFrame');
      if (previewFrame) {
        const timestamp = Date.now();
        previewFrame.src = `${data.url}?v=${timestamp}`;
      }
    })
    .catch(err => {
      console.error('Preview generation failed:', err);
      setError(err.message || 'Failed to generate preview');
    })
    .finally(() => {
      setIsLoadingPreview(false);
    });
  }, [
    selectedLayout,
    selectedTheme,
    selectedContact,
    buildContactData,
    activationBanner,
    heroImageSource,
    customHeroImageUrl,
    heroOverlayOpacity,
    heroBlur,
    heroOverlayWhite,
    profileImageUrl,
    manualHeroTextColors,
    heroTextColor,
    heroTextSecondary,
    heroAccentColor
  ]);

      fetch('/api/website/preview', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestPayload)
      })
      .then(response => {
        if (!response.ok) {
          switch (response.status) {
            case 413:
              throw new Error('Preview data is too large. Try using fewer customizations.');
            case 429:
              throw new Error('Too many requests. Please wait a moment and try again.');
            case 500:
              throw new Error('Server error. Please try again later.');
            default:
              throw new Error(`Server returned ${response.status}: ${response.statusText}`);
          }
        }
        return response.json();
      })
      .then(data => {
        if (data.error) {
          throw new Error(data.error);
        }

        setPreviewHtml(data.html);
        setPreviewCss(data.css);
        setPreviewAssets(data.assets || {});
        setLivePreviewUrl(data.url);
        
        const previewFrame = document.getElementById('previewFrame');
        if (previewFrame) {
          const timestamp = Date.now();
          previewFrame.src = `${data.url}?v=${timestamp}`;
        }
      })
      .catch(err => {
        console.error('Preview generation failed:', err);
        setError(err.message || 'Failed to generate preview');
      })
      .finally(() => {
        setIsLoadingPreview(false);
      });

      // Check content type to avoid parsing HTML as JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('Server returned invalid response format');
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to generate preview');
      }

      console.log('🎨 Preview generated successfully');

      // Store minimal preview data
      const previewData = {
        layout: selectedLayout,
        theme: selectedTheme,
        websiteUrl: result.websiteUrl,
        fileName: result.fileName || `preview-${Date.now()}.html`
      };

      // Only add non-default values to preview data
      if (activationBanner) previewData.activationBanner = activationBanner;
      if (heroImageSource !== 'auto') {
        previewData.heroImageSource = heroImageSource;
        if (heroImageSource === 'custom' || heroImageSource === 'gallery') {
          previewData.heroImageUrl = customHeroImageUrl;
        }
      }
      if (heroOverlayOpacity !== 0.4) previewData.heroOverlayOpacity = heroOverlayOpacity;
      if (heroBlur !== 0) previewData.heroBlur = heroBlur;
      if (heroOverlayWhite) previewData.heroOverlayWhite = heroOverlayWhite;
      if (profileImageUrl) previewData.profileImageUrl = profileImageUrl;
      if (manualHeroTextColors) {
        previewData.manualHeroTextColors = true;
        previewData.heroTextColor = heroTextColor;
        previewData.heroTextSecondary = heroTextSecondary;
        previewData.heroAccentColor = heroAccentColor;
      }

      setPreviewVersion(previewData);
      
      // Update live preview URL
      const timestamp = Date.now();
      const previewUrl = `http://localhost:3030${result.websiteUrl}?preview=true&v=${timestamp}&t=${timestamp}`;
      setLivePreviewUrl(previewUrl);
      
      // Switch to preview tab automatically
      setActiveTab('preview');
    }
  }, [
    selectedLayout, 
    selectedTheme, 
    selectedContact, 
    activationBanner,
    heroImageSource, 
    customHeroImageUrl, 
    heroOverlayOpacity, 
    heroBlur,
    heroOverlayWhite, 
    profileImageUrl, 
    manualHeroTextColors,
    buildContactData,
    handleContactData,
    heroTextSecondary,
    heroAccentColor,
    generatePreview
  }, [
    selectedContact, 
    selectedLayout,
    selectedTheme,
    activationBanner,
    heroImageSource,
    customHeroImageUrl,
    heroOverlayOpacity,
    heroBlur,
    heroOverlayWhite,
    profileImageUrl,
    manualHeroTextColors
  ]);

  const handlePreviewDebounced = useCallback(() => {
    if (!selectedContact || !selectedLayout || !selectedTheme || isLoadingPreview) {
      return;
    }
    const timeoutId = setTimeout(generatePreview, 300);
    return () => clearTimeout(timeoutId);
  }, [selectedContact, selectedLayout, selectedTheme, generatePreview, isLoadingPreview]);

  const handlePreviewEffects = useCallback(() => {
    if (heroImageSource || customHeroImageUrl || heroOverlayOpacity) {
      handlePreviewUpdate();
    }
  }, [handlePreviewUpdate, heroImageSource, customHeroImageUrl, heroOverlayOpacity]);

  useEffect(() => {
    handlePreviewEffects();
  }, [handlePreviewEffects]);

  // State for color auto-update tracking
  const [colorUpdateTimeout, setColorUpdateTimeout] = useState(null);
  const [isColorUpdatePending, setIsColorUpdatePending] = useState(false);

  // Auto-update colors with debouncing - separate effect for manual color changes
  useEffect(() => {
    // Clear any existing timeout
    if (colorUpdateTimeout) {
      clearTimeout(colorUpdateTimeout);
      setColorUpdateTimeout(null);
    }
    
    // Only auto-update colors if manual colors are enabled and we have a preview
    if (manualHeroTextColors && selectedContact && selectedLayout && selectedTheme && livePreviewUrl && !isLoadingPreview) {
      // Show pending indicator
      setIsColorUpdatePending(true);
      
      // Longer debounce for color changes to allow user to finish adjusting
      const timeoutId = setTimeout(() => {
        console.log('🎨 Auto-updating preview with new manual colors...');
        setIsColorUpdatePending(false);
        generatePreview();
      }, 1500); // 1.5 second debounce for color changes

      setColorUpdateTimeout(timeoutId);
      
      return () => {
        clearTimeout(timeoutId);
        setIsColorUpdatePending(false);
      };
    } else {
      setIsColorUpdatePending(false);
    }
    }, [
    heroTextColor,
    heroTextSecondary,
    heroAccentColor,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    generatePreview,
    selectedContact,
    selectedLayout,
    selectedTheme,
    livePreviewUrl,
    isLoadingPreview,
    manualHeroTextColors
  ]);

  // Handle banner toggle - regenerate preview when banner option changes
  useEffect(() => {
    // Only auto-regenerate if we have an existing preview and contact
    if (selectedContact && livePreviewUrl && !isLoadingPreview) {
      // Debounce the preview regeneration to avoid too many rapid calls
      const timeoutId = setTimeout(() => {
        console.log(`🎯 Banner toggle: ${activationBanner ? 'enabled' : 'disabled'} - regenerating preview`);
        generatePreview();
      }, 300); // 300ms debounce
      
      return () => clearTimeout(timeoutId);
    }
  }, [
    activationBanner,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    generatePreview,
    selectedContact,
    livePreviewUrl,
    isLoadingPreview
  ]);

  // Handle manual color override toggle - regenerate preview immediately when toggled
  useEffect(() => {
    // Only auto-regenerate if we have an existing preview and contact
    if (selectedContact && livePreviewUrl && !isLoadingPreview) {
      // Immediate regeneration when manual colors are toggled
      console.log(`🎨 Manual color override: ${manualHeroTextColors ? 'enabled' : 'disabled'} - regenerating preview`);
      generatePreview();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [manualHeroTextColors]); // Only depend on manualHeroTextColors changes

  const generateWebsite = async () => {
    if (!selectedContact || !selectedContact.id) {
      setError('Please select a contact first');
      return;
    }

    // Check if there's a preview to save
    if (!previewVersion) {
      setError('Please generate a preview first before saving the final website');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      // First check if website already exists
      const existingResponse = await fetch(`/api/website/existing/${selectedContact.id}`);
      const existingResult = await existingResponse.json();
      
      if (existingResult.success && existingResult.website && !showRegenerationControls) {
        // Use existing website without regenerating
        const timestamp = Date.now();
        const finalUrl = `http://localhost:3030${existingResult.website.websiteUrl}?final=true&t=${timestamp}`;
        setGeneratedWebsite(existingResult.website);
        setFinalWebsiteUrl(finalUrl);
        setPreviewUrl(finalUrl);
        setPreviewVersion(null);
        setLivePreviewUrl(null);
        setActiveTab('final');

        if (onWebsiteGenerated) {
          onWebsiteGenerated(existingResult.website);
        }
      } else {
        // Generate new website
        const response = await fetch('/api/website/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contactId: selectedContact.id,
            layout: previewVersion.layout,
            theme: previewVersion.theme,
            activationBanner: previewVersion.activationBanner,
            heroImageSource: previewVersion.heroImageSource,
            heroImageUrl: previewVersion.heroImageUrl,
            heroOverlayOpacity: previewVersion.heroOverlayOpacity,
            heroBlur: previewVersion.heroBlur,
            heroOverlayWhite: previewVersion.heroOverlayWhite,
            profileImageUrl: previewVersion.profileImageUrl,
            manualHeroTextColors: previewVersion.manualHeroTextColors,
            heroTextColor: previewVersion.heroTextColor,
            heroTextSecondary: previewVersion.heroTextSecondary,
            heroAccentColor: previewVersion.heroAccentColor
          }),
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || 'Failed to generate website');
        }

        // Update UI with the newly generated website
        const timestamp = Date.now();
        const finalUrl = `http://localhost:3030${result.websiteUrl}?final=true&saved=true&t=${timestamp}`;
        setGeneratedWebsite(result);
        setFinalWebsiteUrl(finalUrl);
        setPreviewUrl(finalUrl);
        setPreviewVersion(null);
        setLivePreviewUrl(null);
        setActiveTab('final');

        if (onWebsiteGenerated) {
          onWebsiteGenerated(result);
        }
      }
    } catch (err) {
      console.error('Generation error:', err);
      setError(err.message || 'Network error while generating website');
    } finally {
      setIsGenerating(false);
    }
  };

  const openGeneratedWebsite = () => {
    if (generatedWebsite && generatedWebsite.websiteUrl) {
      const fullUrl = `http://localhost:3030${generatedWebsite.websiteUrl}`;
      window.open(fullUrl, '_blank');
    }
  };

  const copyWebsiteUrl = () => {
    if (generatedWebsite && generatedWebsite.websiteUrl) {
      const fullUrl = `http://localhost:3030${generatedWebsite.websiteUrl}`;
      navigator.clipboard.writeText(fullUrl);
      // Could add toast notification here
    }
  };

  const handleRegenerateClick = () => {
    setShowRegenerationControls(true);
    // Keep the final website visible, don't clear preview
    // The preview will be updated when user manually generates it
    setError(null);
  };

  const handleCancelRegenerate = () => {
    setShowRegenerationControls(false);
    setPreviewVersion(null); // Clear any unsaved preview
    // Keep the live preview active for continued editing
    setActiveTab('preview'); // Stay on preview tab for editing
    // Restore the final website view with fresh timestamp
    if (finalWebsiteUrl) {
      const timestamp = Date.now();
      const baseUrl = finalWebsiteUrl.split('?')[0];
      const restoredUrl = `${baseUrl}?final=true&restored=true&t=${timestamp}`;
      setPreviewUrl(restoredUrl);
      setFinalWebsiteUrl(restoredUrl);
    } else {
      setPreviewUrl(null);
    }
  };

  const handleDeployClick = () => {
    setShowDeployConfirm(true);
  };

  const confirmDeploy = () => {
    setShowDeployConfirm(false);
    deployToNetlify();
  };

  const cancelDeploy = () => {
    setShowDeployConfirm(false);
  };

  const deployToNetlify = async () => {
    if (!selectedContact) {
      setError('Please select a contact first');
      return;
    }

    setIsDeployingNetlify(true);
    setError(null);

    try {
      let websiteToDeploy = generatedWebsite;

      // If there's a preview version but no final website, save preview first
      if (previewVersion && (!websiteToDeploy || !websiteToDeploy.filePath)) {
        console.log('🔄 Saving preview to final website before deployment...');
        
        const response = await fetch('/api/website/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contactId: selectedContact.id,
            layout: previewVersion.layout,
            theme: previewVersion.theme,
          }),
        });

        const result = await response.json();

        if (result.success) {
          websiteToDeploy = result;
          setGeneratedWebsite(result);
          setFinalWebsiteUrl(`http://localhost:3030${result.websiteUrl}?t=${Date.now()}`);
          setPreviewVersion(null); // Clear preview since it's now saved
        } else {
          setError(result.error || 'Failed to save website before deployment');
          return;
        }
      }
      
      // If still no website, generate one first
      else if (!websiteToDeploy || !websiteToDeploy.filePath) {
        console.log('🔄 No website generated yet, generating one first...');
        
        const response = await fetch('/api/website/generate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contactId: selectedContact.id,
            layout: selectedLayout,
            theme: selectedTheme,
          }),
        });

        const result = await response.json();

        if (result.success) {
          websiteToDeploy = result;
          setGeneratedWebsite(result); // Update the state
          console.log('✅ Website generated successfully for deployment');
        } else {
          setError(result.error || 'Failed to generate website for deployment');
          return;
        }
      }

      console.log('🚀 Proceeding with Netlify deployment...');

      // Now deploy to Netlify
      const deployResponse = await fetch('/api/website/deploy-netlify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          filePath: websiteToDeploy.filePath,
          contactData: selectedContact,
          siteName: null // Let it auto-generate
        }),
      });

      const deployResult = await deployResponse.json();

      if (deployResult.success) {
        setNetlifyDeployment(deployResult.deployment);
        console.log('✅ Netlify deployment successful:', deployResult.deployment);
      } else {
        if (deployResult.configRequired) {
          setError('Netlify not configured. Please add your NETLIFY_ACCESS_TOKEN to the server environment variables.');
        } else {
          setError(deployResult.error || 'Failed to deploy to Netlify');
        }
      }
    } catch (err) {
      setError('Network error while deploying to Netlify');
      console.error('Netlify deployment error:', err);
    } finally {
      setIsDeployingNetlify(false);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-container modal-container-large">
        <div className="modular-website-generator">
          <div className="generator-header">
            <h3>🎨 Modular Website Generator</h3>
            
            <button 
              onClick={onClose}
              className="close-button"
              title="Close"
            >
              ✕
            </button>
            <p>Generate a professional website with customizable layouts and themes</p>
          </div>

          <div className="generator-content">
            {/* Left Panel - Controls */}
            <div className="generator-controls">
              {selectedContact ? (
                <div className="contact-info">
                  <strong>Website for:</strong> {selectedContact.name || selectedContact.email || 'Unknown Contact'}
                  <div className="text-sm text-gray-600 mt-1">
                    {selectedContact.company && `${selectedContact.company} • `}
                    {selectedContact.phone && `${selectedContact.phone} • `}
                    {selectedContact.email}
                  </div>
                </div>
              ) : (
                <div className="no-contact-warning">
                  ⚠️ No contact selected. Click "Generator" on any row to load contact data automatically.
                </div>
              )}

              {/* Show existing website info or regenerate button */}
              {!showRegenerationControls ? (
                <div className="existing-website-section">
                  {isLoadingExisting ? (
                    <div className="loading-existing">
                      <span className="spinner"></span>
                      Loading existing website...
                    </div>
                  ) : generatedWebsite ? (
                    <div className="existing-website-info">
                      <div className="section-header">
                        <h4>📄 Current Website</h4>
                        <p>Last generated website for this contact</p>
                      </div>
                      <div className="website-details">
                        <div className="detail-item">
                          <strong>Layout:</strong> {generatedWebsite.layout}
                        </div>
                        <div className="detail-item">
                          <strong>Theme:</strong> {generatedWebsite.theme}
                        </div>
                        <div className="detail-item">
                          <strong>File:</strong> {generatedWebsite.fileName}
                        </div>
                        <div className="detail-item">
                          <strong>Generated:</strong> {generatedWebsite.generatedAt ? new Date(generatedWebsite.generatedAt).toLocaleString() : 'Unknown'}
                        </div>
                      </div>
                      <div className="existing-actions">
                        <button onClick={openGeneratedWebsite} className="action-btn primary">
                          <span className="btn-icon">🌐</span>
                          Open Website
                        </button>
                        <button onClick={copyWebsiteUrl} className="action-btn secondary">
                          <span className="btn-icon">📋</span>
                          Copy URL
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="no-website-info">
                      <div className="section-header">
                        <h4>🆕 No Website Found</h4>
                        <p>No existing website found for this contact</p>
                      </div>
                    </div>
                  )}
                  
                  {/* Regenerate Website Button */}
                  <div className="regenerate-section">
                    <button 
                      onClick={handleRegenerateClick}
                      disabled={!selectedContact}
                      className="regenerate-btn"
                    >
                      <span className="btn-icon">🔄</span>
                      {generatedWebsite ? 'Regenerate Website' : 'Generate New Website'}
                    </button>
                  </div>
                </div>
              ) : (
                <div className="regeneration-controls">
                  <div className="section-header">
                    <h4>🎨 Website Generation</h4>
                    <p>Choose layout and theme for the new website</p>
                  </div>

                  <div className="generator-options">
                    {/* Layout Selection */}
                    <div className="option-group">
                      <label className="option-label">
                        <span className="option-icon">📐</span>
                        Layout System
                      </label>
                      <select 
                        value={selectedLayout} 
                        onChange={(e) => setSelectedLayout(e.target.value)}
                        className="option-select"
                        disabled={isGenerating}
                      >
                        {layouts.map((layout) => (
                          <option key={layout.key} value={layout.key}>
                            {layout.name} - {layout.description}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Theme Selection */}
                    <div className="option-group">
                      <label className="option-label">
                        <span className="option-icon">🎨</span>
                        Theme System
                      </label>
                      <select 
                        value={selectedTheme} 
                        onChange={(e) => setSelectedTheme(e.target.value)}
                        className="option-select"
                        disabled={isGenerating}
                      >
                        {themes.map((theme) => (
                          <option key={theme.key} value={theme.key}>
                            {theme.name} - {theme.description}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Hero Image Configuration */}
                    <div className="option-group hero-image-group">
                      <label className="option-label">
                        <span className="option-icon">🖼️</span>
                        Hero Background Image
                        {isLoadingPreview && (
                          <span className="updating-indicator">
                            <span className="spinner-small"></span>
                            Updating...
                          </span>
                        )}
                      </label>
                      <select 
                        value={heroImageSource} 
                        onChange={(e) => setHeroImageSource(e.target.value)}
                        className="option-select"
                        disabled={isGenerating || isLoadingPreview}
                      >
                        <option value="auto">Auto-select from properties</option>
                        <option value="property_first">First property image</option>
                        <option value="property_featured">Featured property image</option>
                        <option value="gallery">Choose from image gallery ({availableImages.length} images)</option>
                        <option value="custom">Custom image URL</option>
                        <option value="none">No background image</option>
                      </select>
                      
                      {heroImageSource === 'gallery' && (
                        <div className="image-gallery-selection">
                          <button
                            type="button"
                            onClick={openImageGallery}
                            className="gallery-open-button"
                            disabled={isGenerating || isLoadingPreview}
                          >
                            <span className="button-icon">🖼️</span>
                            Open Image Gallery
                            {isLoadingImages && (
                              <span className="loading-indicator">
                                <span className="spinner-small"></span>
                              </span>
                            )}
                          </button>
                          {customHeroImageUrl && (
                            <div className="selected-image-preview">
                              <img 
                                src={customHeroImageUrl} 
                                alt="Selected hero image"
                                className="preview-thumbnail"
                                onError={(e) => {
                                  e.target.style.display = 'none';
                                }}
                              />
                              <span className="selected-image-info">
                                Currently selected: {customHeroImageUrl}
                              </span>
                            </div>
                          )}
                        </div>
                      )}
                      
                      {heroImageSource === 'custom' && (
                        <div className="custom-image-url">
                          <input
                            type="url"
                            placeholder="Enter image URL (e.g., https://example.com/image.jpg)"
                            value={customHeroImageUrl}
                            onChange={(e) => setCustomHeroImageUrl(e.target.value)}
                            className="option-input"
                            disabled={isGenerating || isLoadingPreview}
                          />
                        </div>
                      )}
                      
                      <div className="overlay-opacity-control">
                        <label className="overlay-label">
                          Background Overlay Opacity: {Math.round(heroOverlayOpacity * 100)}%
                        </label>
                        <input
                          type="range"
                          min="0"
                          max="1"
                          step="0.1"
                          value={heroOverlayOpacity}
                          onChange={(e) => setHeroOverlayOpacity(parseFloat(e.target.value))}
                          className="overlay-slider"
                          disabled={isGenerating || isLoadingPreview}
                        />
                        <div className="overlay-help">
                          <small>Higher values make text more readable over busy backgrounds</small>
                        </div>
                      </div>

                      <div className="blur-control">
                        <label className="overlay-label">
                          Background Blur: {heroBlur}px
                        </label>
                        <input
                          type="range"
                          min="0"
                          max="10"
                          step="0.5"
                          value={heroBlur}
                          onChange={(e) => setHeroBlur(parseFloat(e.target.value))}
                          className="overlay-slider"
                          disabled={isGenerating || isLoadingPreview}
                        />
                        <div className="overlay-help">
                          <small>Blur the background image to reduce distraction from text</small>
                        </div>
                      </div>

                      <div className="overlay-color-control">
                        <label className="overlay-checkbox-label">
                          <input
                            type="checkbox"
                            checked={heroOverlayWhite}
                            onChange={(e) => setHeroOverlayWhite(e.target.checked)}
                            disabled={isGenerating || isLoadingPreview}
                            className="overlay-checkbox"
                          />
                          Use white overlay instead of black
                        </label>
                        <div className="overlay-help">
                          <small>White overlay with dark text works better on dark images. Text and button colors will automatically adjust for contrast.</small>
                          {manualHeroTextColors && heroOverlayWhite && (
                            <div className="overlay-conflict-warning">
                              <small>⚠️ Manual text colors override automatic contrast adjustment. Consider disabling manual colors for automatic contrast.</small>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Profile Image Configuration */}
                    <div className="option-group profile-image-group">
                      <label className="option-label">
                        <span className="option-icon">👤</span>
                        Profile Picture URL (Optional)
                        {isLoadingPreview && (
                          <span className="updating-indicator">
                            <span className="spinner-small"></span>
                            Updating...
                          </span>
                        )}
                      </label>
                      <input
                        type="url"
                        placeholder="Enter profile image URL (e.g., https://example.com/profile.jpg)"
                        value={profileImageUrl}
                        onChange={(e) => setProfileImageUrl(e.target.value)}
                        className="option-input profile-image-input"
                        disabled={isGenerating || isLoadingPreview}
                      />
                      <div className="profile-image-help">
                        <small>Leave empty to use the default profile image from contact data</small>
                      </div>
                    </div>

                    {/* Manual Hero Text Color Controls */}
                    <div className="option-group manual-colors-group">
                      <label className="option-label">
                        <span className="option-icon">🎨</span>
                        Manual Hero Text Colors
                        {(isLoadingPreview || isColorUpdatePending) && (
                          <span className="updating-indicator">
                            <span className="spinner-small"></span>
                            {isColorUpdatePending ? 'Auto-updating in 1.5s...' : 'Updating...'}
                          </span>
                        )}
                      </label>
                      
                      <div className="manual-colors-toggle">
                        <label className="overlay-checkbox-label">
                          <input
                            type="checkbox"
                            checked={manualHeroTextColors}
                            onChange={(e) => setManualHeroTextColors(e.target.checked)}
                            disabled={isGenerating || isLoadingPreview}
                            className="overlay-checkbox"
                          />
                          Override automatic text colors
                          {manualHeroTextColors && (
                            <span className="manual-mode-indicator">
                              🎨 Manual mode active
                            </span>
                          )}
                        </label>
                        <div className="overlay-help">
                          <small>When enabled, you can manually set hero text colors. Changes auto-apply after 1.5 seconds.</small>
                          {manualHeroTextColors && heroOverlayWhite && (
                            <div className="overlay-conflict-warning">
                              <small>💡 Manual colors override automatic overlay detection. Consider disabling "Use white overlay" above for consistent results.</small>
                            </div>
                          )}
                        </div>
                      </div>

                      {manualHeroTextColors && (
                        <div className="color-controls">
                          <div className="color-control">
                            <label className="color-label">
                              Primary Text Color:
                            </label>
                            <div className="color-input-container">
                              <input
                                type="color"
                                value={heroTextColor}
                                onChange={(e) => setHeroTextColor(e.target.value)}
                                className="color-picker"
                                disabled={isGenerating || isLoadingPreview}
                              />
                              <input
                                type="text"
                                value={heroTextColor}
                                onChange={(e) => setHeroTextColor(e.target.value)}
                                className="color-text-input"
                                disabled={isGenerating || isLoadingPreview}
                                placeholder="#ffffff"
                              />
                            </div>
                          </div>

                          <div className="color-control">
                            <label className="color-label">
                              Secondary Text Color:
                            </label>
                            <div className="color-input-container">
                              <input
                                type="color"
                                value={heroTextSecondary}
                                onChange={(e) => setHeroTextSecondary(e.target.value)}
                                className="color-picker"
                                disabled={isGenerating || isLoadingPreview}
                              />
                              <input
                                type="text"
                                value={heroTextSecondary}
                                onChange={(e) => setHeroTextSecondary(e.target.value)}
                                className="color-text-input"
                                disabled={isGenerating || isLoadingPreview}
                                placeholder="#e5e5e5"
                              />
                            </div>
                          </div>

                          <div className="color-control">
                            <label className="color-label">
                              Accent Color:
                            </label>
                            <div className="color-input-container">
                              <input
                                type="color"
                                value={heroAccentColor}
                                onChange={(e) => setHeroAccentColor(e.target.value)}
                                className="color-picker"
                                disabled={isGenerating || isLoadingPreview}
                              />
                              <input
                                type="text"
                                value={heroAccentColor}
                                onChange={(e) => setHeroAccentColor(e.target.value)}
                                className="color-text-input"
                                disabled={isGenerating || isLoadingPreview}
                                placeholder="#3b82f6"
                              />
                            </div>
                          </div>

                          <div className="color-actions">
                            <button 
                              type="button"
                              onClick={generatePreview}
                              disabled={isGenerating || isLoadingPreview}
                              className="refresh-preview-btn"
                              title="Apply current color settings to preview"
                            >
                              {isLoadingPreview ? (
                                <>
                                  <span className="spinner-small"></span>
                                  Applying Colors...
                                </>
                              ) : (
                                <>
                                  🎨 Apply Colors
                                </>
                              )}
                            </button>
                            <div className="color-help">
                              <small>
                                {isColorUpdatePending 
                                  ? '⏱️ Color update pending - will apply automatically in 1.5 seconds...'
                                  : manualHeroTextColors 
                                    ? 'Colors will auto-update after 1.5 seconds of inactivity, or click "Apply Colors" for immediate update.'
                                    : 'Enable manual colors above to customize hero text colors.'
                                }
                              </small>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Activation Banner Configuration */}
                    <div className="option-group">
                      <label className="option-label">
                        <span className="option-icon">💳</span>
                        Payment Banner
                      </label>
                      <label className="banner-toggle-label">
                        <input 
                          type="checkbox"
                          checked={activationBanner}
                          onChange={(e) => setActivationBanner(e.target.checked)}
                          className="banner-toggle-checkbox"
                        />
                        <span className="banner-toggle-text">
                          <strong>Show Activation Banner</strong>
                          <small>Display payment banner on website (uncheck if client has paid)</small>
                        </span>
                      </label>
                    </div>

                  </div>

                  {/* Generate Button */}
                  <div className="generator-actions">
                    <button 
                      onClick={generateWebsite}
                      disabled={isGenerating || !selectedContact}
                      className={`generate-btn ${isGenerating ? 'generating' : ''}`}
                      title={!selectedContact ? 'Select a contact first' : 'Generate final website'}
                    >
                      {isGenerating ? (
                        <>
                          <span className="spinner"></span>
                          Saving Website...
                        </>
                      ) : previewVersion ? (
                        <>
                          <span className="generate-icon">💾</span>
                          Save Preview to Final Website
                        </>
                      ) : (
                        <>
                          <span className="generate-icon">🚀</span>
                          Generate Final Website
                        </>
                      )}
                    </button>
                    
                    <button 
                      onClick={handleCancelRegenerate}
                      disabled={isGenerating}
                      className="cancel-regenerate-btn"
                    >
                      <span className="btn-icon">❌</span>
                      Cancel
                    </button>
                  </div>
                </div>
              )}

              {/* Netlify Deployment Actions - Always Visible */}
              {netlifyConfigured && selectedContact && (
                <div className="netlify-actions-section">
                  <div className="section-header">
                    <h4>🚀 Netlify Deployment</h4>
                    <p>Deploy your generated website to a live URL</p>
                  </div>
                  <div className="netlify-actions">
                    <button 
                      onClick={handleDeployClick} 
                      disabled={isDeployingNetlify}
                      className={`action-btn netlify ${isDeployingNetlify ? 'deploying' : ''}`}
                    >
                      {isDeployingNetlify ? (
                        <>
                          <span className="spinner"></span>
                          Deploying...
                        </>
                      ) : (
                        <>
                          <span className="btn-icon">🚀</span>
                          Deploy to Netlify
                        </>
                      )}
                    </button>
                    {generatedWebsite && (
                      <span className="deployment-info">
                        Latest website: {generatedWebsite.fileName}
                      </span>
                    )}
                  </div>
                </div>
              )}

              {/* Error Display */}
              {error && (
                <div className="error-message">
                  <span className="error-icon">❌</span>
                  {error}
                </div>
              )}

              {/* Success Display - Only when regenerating */}
              {generatedWebsite && showRegenerationControls && (
                <div className="success-message">
                  <div className="success-header">
                    <span className="success-icon">✅</span>
                    Website Generated Successfully!
                  </div>
                  
                  <div className="website-details">
                    <div className="detail-item">
                      <strong>Layout:</strong> {generatedWebsite.layout}
                    </div>
                    <div className="detail-item">
                      <strong>Theme:</strong> {generatedWebsite.theme}
                    </div>
                    <div className="detail-item">
                      <strong>File:</strong> {generatedWebsite.fileName}
                    </div>
                  </div>

                  <div className="website-actions">
                    <button onClick={openGeneratedWebsite} className="action-btn primary">
                      <span className="btn-icon">🌐</span>
                      Open Website
                    </button>
                    <button onClick={copyWebsiteUrl} className="action-btn secondary">
                      <span className="btn-icon">📋</span>
                      Copy URL
                    </button>
                    <button 
                      onClick={() => setShowRegenerationControls(false)}
                      className="action-btn secondary"
                    >
                      <span className="btn-icon">✅</span>
                      Done
                    </button>
                  </div>
                </div>
              )}

              {/* Netlify Deployment Success */}
              {netlifyDeployment && (
                <div className="netlify-success">
                  <div className="success-header">
                    <span className="success-icon">🚀</span>
                    Deployed to Netlify Successfully!
                  </div>
                  
                  <div className="netlify-details">
                    <div className="detail-item">
                      <strong>Site Name:</strong> {netlifyDeployment.siteName}
                    </div>
                    <div className="detail-item">
                      <strong>Status:</strong> {netlifyDeployment.state}
                    </div>
                    <div className="detail-item">
                      <strong>Deployed:</strong> {new Date(netlifyDeployment.createdAt).toLocaleString()}
                    </div>
                  </div>

                  <div className="netlify-actions">
                    <button 
                      onClick={() => window.open(netlifyDeployment.siteUrl, '_blank')}
                      className="action-btn primary netlify-live"
                    >
                      <span className="btn-icon">🌐</span>
                      View Live Site
                    </button>
                    <button 
                      onClick={() => navigator.clipboard.writeText(netlifyDeployment.siteUrl)}
                      className="action-btn secondary"
                    >
                      <span className="btn-icon">📋</span>
                      Copy Live URL
                    </button>
                    {netlifyDeployment.adminUrl && (
                      <button 
                        onClick={() => window.open(netlifyDeployment.adminUrl, '_blank')}
                        className="action-btn secondary"
                      >
                        <span className="btn-icon">⚙️</span>
                        Netlify Admin
                      </button>
                    )}
                  </div>
                </div>
              )}

              {/* Netlify Configuration Info */}
              {!netlifyConfigured && generatedWebsite && (
                <div className="netlify-config-info">
                  <div className="config-header">
                    <span className="config-icon">⚠️</span>
                    Netlify Not Configured
                  </div>
                  <p>To enable Netlify deployment, add your NETLIFY_ACCESS_TOKEN to the server environment variables.</p>
                  <div className="config-steps">
                    <div className="step">1. Get your Personal Access Token from Netlify dashboard</div>
                    <div className="step">2. Add NETLIFY_ACCESS_TOKEN=your_token to .env file</div>
                    <div className="step">3. Restart the server</div>
                  </div>
                </div>
              )}

              {/* System Information */}
              <div className="system-info">
                <h4>🔧 System Features</h4>
                <ul>
                  <li><strong>Theme System:</strong> Controls visual styling and colors</li>
                  <li><strong>Smart Content:</strong> Only shows components when data is available</li>
                  <li><strong>Responsive Design:</strong> Optimized for mobile, tablet, and desktop</li>
                  <li><strong>Easy Swapping:</strong> Mix and match any layout with any theme</li>
                </ul>
              </div>
            </div>

            {/* Right Panel - Live Preview */}
            <div className="generator-preview">
              <div className="preview-header">
                <h4>
                  {previewVersion ? '🎨 Live Preview' : '🖥️ Final Website'}
                </h4>
                <div className="preview-info">
                  {previewVersion ? (
                    <span className="preview-combo preview-mode">
                      Preview: {previewVersion.layout} + {previewVersion.theme}
                    </span>
                  ) : generatedWebsite ? (
                    <span className="preview-combo final-mode">
                      Final: {generatedWebsite.layout} + {generatedWebsite.theme}
                    </span>
                  ) : selectedTheme && selectedLayout ? (
                    <span className="preview-combo">
                      Ready: {selectedLayout} + {selectedTheme}
                    </span>
                  ) : null}
                </div>
              </div>
              
              <div className="preview-container">
                {/* Tab Navigation - Always show tabs since live preview is always available */}
                <div className="preview-tabs">
                  <button 
                    className={`tab-button ${activeTab === 'preview' ? 'active' : ''}`}
                    onClick={() => setActiveTab('preview')}
                    disabled={!livePreviewUrl && !isLoadingPreview && !isLoadingExisting}
                    title={livePreviewUrl ? 'Edit and preview changes in real-time' : 'Live preview will be available shortly'}
                  >
                    Live Preview
                  </button>
                  <button 
                    className={`tab-button ${activeTab === 'final' ? 'active' : ''}`}
                    onClick={() => setActiveTab('final')}
                    disabled={!finalWebsiteUrl && !isLoadingExisting}
                    title={finalWebsiteUrl ? 'View the final published website' : 'No final website available - generate one first'}
                  >
                    Final Website
                  </button>
                </div>

                {/* Loading States */}
                {isLoadingPreview && activeTab === 'preview' && (
                  <div className="preview-loading">
                    <div className="preview-spinner"></div>
                    <p>Generating preview...</p>
                  </div>
                )}
                
                {isLoadingExisting && activeTab === 'final' && (
                  <div className="preview-loading">
                    <div className="preview-spinner"></div>
                    <p>Loading existing website...</p>
                  </div>
                )}
                
                {/* Final Website Tab */}
                {activeTab === 'final' && finalWebsiteUrl && !isLoadingExisting ? (
                  <iframe
                    key={`final-${finalWebsiteUrl}`}
                    src={finalWebsiteUrl}
                    className="preview-iframe"
                    title="Final Website"
                    sandbox="allow-scripts allow-same-origin"
                  />
                ) : null}
                
                {/* Live Preview Tab */}
                {activeTab === 'preview' && livePreviewUrl && !isLoadingPreview ? (
                  <iframe
                    key={`preview-${livePreviewUrl}`}
                    src={livePreviewUrl}
                    className="preview-iframe"
                    title="Live Preview"
                    sandbox="allow-scripts allow-same-origin"
                  />
                ) : null}
                
                {/* Fallback to old preview URL for backward compatibility */}
                {activeTab === 'final' && !finalWebsiteUrl && previewUrl && !isLoadingPreview && !isLoadingExisting ? (
                  <iframe
                    key={previewUrl}
                    src={previewUrl}
                    className="preview-iframe"
                    title="Website Preview"
                    sandbox="allow-scripts allow-same-origin"
                  />
                ) : null}
                
                {/* Placeholder when no content to show */}
                {!finalWebsiteUrl && !livePreviewUrl && !previewUrl && !isLoadingPreview && !isLoadingExisting && (
                  <div className="preview-placeholder">
                    <div className="placeholder-content">
                      {!showRegenerationControls ? (
                        <>
                          <div className="placeholder-icon">📄</div>
                          <h4>Website Manager</h4>
                          {generatedWebsite ? (
                            <>
                              <p>Viewing existing website for this contact</p>
                              <div className="placeholder-steps">
                                <div className="step">🔍 Current website is displayed above</div>
                                <div className="step">🔄 Click "Regenerate Website" to create a new version</div>
                                <div className="step">🚀 Deploy to Netlify anytime</div>
                              </div>
                            </>
                          ) : (
                            <>
                              <p>No existing website found for this contact</p>
                              <div className="placeholder-steps">
                                <div className="step">🆕 No website exists yet</div>
                                <div className="step">🔄 Click "Generate New Website" to create one</div>
                                <div className="step">🎨 Choose from multiple layouts and themes</div>
                              </div>
                            </>
                          )}
                        </>
                      ) : (
                        <>
                          <div className="placeholder-icon">🎨</div>
                          <h4>Website Generator</h4>
                          <p>Ready to create a new website</p>
                          <div className="placeholder-steps">
                            <div className="step">🎨 Select layout: {selectedLayout}</div>
                            <div className="step">🖌️ Select theme: {selectedTheme}</div>
                            <div className="step">🔍 Live preview will generate automatically</div>
                            <div className="step">🔄 Preview updates automatically when you change settings</div>
                            <div className="step">� Click "Save Preview to Final Website" when ready</div>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                )}
              </div>

              {(previewUrl || showRegenerationControls) && (
                <div className="preview-actions">
                  {previewUrl && (
                    <button 
                      onClick={() => window.open(previewUrl, '_blank')}
                      className="preview-btn"
                    >
                      <span className="btn-icon">🔍</span>
                      Open Full Preview
                    </button>
                  )}
                  {showRegenerationControls && (
                    <button 
                      onClick={generatePreview}
                      className="preview-btn secondary"
                      disabled={isLoadingPreview}
                      title={previewVersion ? 'Updates automatically when you change settings' : 'Start live preview mode'}
                    >
                      <span className="btn-icon">🔄</span>
                      {isLoadingPreview ? 'Updating...' : previewVersion ? 'Update Preview' : 'Start Live Preview'}
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Netlify Deployment Confirmation Dialog */}
      {showDeployConfirm && (
        <div className="deploy-confirm-overlay">
          <div className="deploy-confirm-modal">
            <div className="confirm-header">
              <h3>🚀 Deploy to Netlify</h3>
              <p>Are you sure you want to deploy this website?</p>
            </div>
            
            <div className="confirm-details">
              <div className="detail-row">
                <strong>Contact:</strong> {selectedContact?.name || 'Unknown'}
              </div>
              <div className="detail-row">
                <strong>Layout:</strong> {selectedLayout}
              </div>
              <div className="detail-row">
                <strong>Theme:</strong> {selectedTheme}
              </div>
              {generatedWebsite ? (
                <div className="detail-row">
                  <strong>Website:</strong> {generatedWebsite.fileName}
                  <span className="status-ready">✅ Ready to deploy</span>
                </div>
              ) : (
                <div className="detail-row">
                  <strong>Website:</strong> Will be generated automatically
                  <span className="status-generate">🔄 Will generate first</span>
                </div>
              )}
              <div className="detail-row">
                <strong>Result:</strong> Live website at unique Netlify URL
              </div>
            </div>

            <div className="confirm-warning">
              <p>⚠️ This will create a new public website that anyone can access with the URL.</p>
            </div>

            <div className="confirm-actions">
              <button 
                onClick={cancelDeploy}
                className="action-btn secondary"
              >
                <span className="btn-icon">❌</span>
                Cancel
              </button>
              <button 
                onClick={confirmDeploy}
                className="action-btn netlify"
              >
                <span className="btn-icon">🚀</span>
                Yes, Deploy Now
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Image Gallery Modal */}
      {showImageGallery && (
        <div className="modal-overlay" onClick={() => setShowImageGallery(false)}>
          <div className="image-gallery-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>
                <span className="modal-icon">🖼️</span>
                Choose Hero Background Image
              </h3>
              <button 
                className="close-modal-btn"
                onClick={() => setShowImageGallery(false)}
                type="button"
              >
                ✕
              </button>
            </div>
            
            <div className="modal-content">
              {isLoadingImages ? (
                <div className="loading-state">
                  <span className="spinner-large"></span>
                  <p>Loading images from all contacts and properties...</p>
                </div>
              ) : availableImages.length === 0 ? (
                <div className="empty-state">
                  <span className="empty-icon">📷</span>
                  <p>No images found across contacts and properties.</p>
                  <button 
                    onClick={fetchAvailableImages}
                    className="retry-btn"
                    type="button"
                  >
                    Retry Loading
                  </button>
                </div>
              ) : (
                <>
                  <div className="gallery-stats">
                    <span className="total-count">
                      {availableImages.length} images found
                    </span>
                    <div className="source-breakdown">
                      <span className="source-count contact">
                        {availableImages.filter(img => img.source === 'contact').length} from contacts
                      </span>
                      <span className="source-count property">
                        {availableImages.filter(img => img.source === 'property').length} from properties
                      </span>
                      <span className="source-count project">
                        {availableImages.filter(img => img.source === 'project').length} from project
                      </span>
                    </div>
                  </div>

                  <div className="gallery-filters">
                    <span className="filter-label">Filter by source:</span>
                    <div className="filter-buttons">
                      <button
                        className={`filter-btn ${imageFilter === 'all' ? 'active' : ''}`}
                        onClick={() => setImageFilter('all')}
                        type="button"
                      >
                        All ({availableImages.length})
                      </button>
                      <button
                        className={`filter-btn project ${imageFilter === 'project' ? 'active' : ''}`}
                        onClick={() => setImageFilter('project')}
                        type="button"
                      >
                        📁 Project ({availableImages.filter(img => img.source === 'project').length})
                      </button>
                      <button
                        className={`filter-btn contact ${imageFilter === 'contact' ? 'active' : ''}`}
                        onClick={() => setImageFilter('contact')}
                        type="button"
                      >
                        👤 Contacts ({availableImages.filter(img => img.source === 'contact').length})
                      </button>
                      <button
                        className={`filter-btn property ${imageFilter === 'property' ? 'active' : ''}`}
                        onClick={() => setImageFilter('property')}
                        type="button"
                      >
                        🏠 Properties ({availableImages.filter(img => img.source === 'property').length})
                      </button>
                    </div>
                  </div>
                  
                  <div className="image-gallery-grid">
                    {getFilteredImages().map((image) => (
                      <div 
                        key={image.uniqueId || image.url} 
                        className={`gallery-image-item ${customHeroImageUrl === image.url ? 'selected' : ''}`}
                        onClick={() => handleImageSelect(image.url)}
                      >
                        <div className="image-container">
                          <img 
                            src={image.url}
                            alt={image.description}
                            className="gallery-image"
                            onError={(e) => {
                              e.target.parentElement.classList.add('error');
                              e.target.style.display = 'none';
                              e.target.nextSibling.style.display = 'flex';
                            }}
                          />
                          <div className="image-error" style={{ display: 'none' }}>
                            <span className="error-icon">❌</span>
                            <span className="error-text">Failed to load</span>
                          </div>
                        </div>
                        <div className="image-info">
                          <div className="image-description" title={image.description}>
                            {image.description}
                          </div>
                          <div className="image-source">
                            <span className={`source-badge ${image.source}`}>
                              {image.source === 'contact' && '👤'}
                              {image.source === 'property' && '🏠'}
                              {image.source === 'project' && '📁'}
                              {image.source}
                            </span>
                            {image.contactName && (
                              <span className="contact-name">{image.contactName}</span>
                            )}
                          </div>
                        </div>
                        {customHeroImageUrl === image.url && (
                          <div className="selected-indicator">
                            <span className="checkmark">✓</span>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </>
              )}
            </div>
            
            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowImageGallery(false)}
                type="button"
              >
                Cancel
              </button>
              <button 
                className="select-btn"
                onClick={() => setShowImageGallery(false)}
                disabled={!customHeroImageUrl}
                type="button"
              >
                Use Selected Image
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ModularWebsiteGenerator;
